(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{571:function(t,a,s){"use strict";s.r(a);var r=s(2),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"eslint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eslint"}},[t._v("#")]),t._v(" Eslint")]),t._v(" "),s("p",[t._v("ESLint 是一个在 JavaScript 代码中通过规则模式匹配作代码识别和报告的插件化的检测工具，它的目的是保证代码规范的一致性和及时发现代码问题、提前避免错误发生。")]),t._v(" "),s("p",[t._v("ESLint 的关注点是代码质量，检查代码风格并且会提示不符合风格规范的代码。除此之外 ESLint 也具有一部分代码格式化的功能。")]),t._v(" "),s("blockquote",[s("p",[t._v("ESLint官网的说明：代码检查是一种静态的分析，常用于寻找有问题的模式或者代码，并且不依赖于具体的编码风格。对大多数编程语言来说都会有代码检查，一般来说编译程序会内置检查工具。\nJavaScript 是一个动态的弱类型语言，在开发中比较容易出错。因为没有编译程序，为了寻找 JavaScript 代码错误通常需要在执行过程中不断调试。像 ESLint 这样的可以让程序员在编码的过程中发现问题而不是在执行的过程中。")])]),t._v(" "),s("h2",{attrs:{id:"一、eslint的作用及优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、eslint的作用及优势"}},[t._v("#")]),t._v(" 一、ESLint的作用及优势")]),t._v(" "),s("h4",{attrs:{id:"检查语法错误-避免低级bug"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查语法错误-避免低级bug"}},[t._v("#")]),t._v(" 检查语法错误，避免低级bug")]),t._v(" "),s("p",[t._v("比如：api语法错误、使用了未定义的变量、修改const变量")]),t._v(" "),s("h4",{attrs:{id:"统一团队代码风格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#统一团队代码风格"}},[t._v("#")]),t._v(" 统一团队代码风格")]),t._v(" "),s("p",[t._v("比如：使用tab还是空格，使用单引号还是双引号等")]),t._v(" "),s("h4",{attrs:{id:"确保代码遵循最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#确保代码遵循最佳实践"}},[t._v("#")]),t._v(" 确保代码遵循最佳实践")]),t._v(" "),s("p",[t._v("比如：可以借助eslint-config-standard配置包扩展社区中流行的最佳实践的风格指南。")])])}),[],!1,null,null,null);a.default=e.exports}}]);