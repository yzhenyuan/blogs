(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{535:function(t,a,e){"use strict";e.r(a);var r=e(2),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("h2",{attrs:{id:"react-fiber-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-fiber-是什么"}},[t._v("#")]),t._v(" React Fiber 是什么？")]),t._v(" "),e("p",[t._v("为了解决 diff 时间过长导致的卡顿问题，React Fiber 用类似 requestIdleCallback 的机制来做异步 diff")]),t._v(" "),e("p",[t._v("但是之前的数据结构不支持这样的实现异步 diff，于是 React 实现了一个类似链表的数据结构，将原来的 递归diff 变成了现在的 遍历diff，这样就能方便的做中断和恢复了。")]),t._v(" "),e("h2",{attrs:{id:"如何让-react-的-diff-可中断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何让-react-的-diff-可中断"}},[t._v("#")]),t._v(" 如何让 React 的 diff 可中断？")])])}),[],!1,null,null,null);a.default=s.exports}}]);