(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{615:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"vue-中的-dom-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-中的-dom-diff"}},[s._v("#")]),s._v(" Vue 中的 DOM-Diff")]),s._v(" "),a("p",[s._v("在 Vue 中，把 DOM-Diff 过程叫做"),a("strong",[s._v("patch 过程")]),s._v("（核心）。patch,意为“补丁”，即指对旧的 VNode 修补，打补丁从而得到新的 VNode。")]),s._v(" "),a("p",[s._v("总之一句话：以新的 VNode 为基准，改造旧的 oldVNode 使之成为跟新的 VNode 一样，这就是 patch 过程要干的事。")]),s._v(" "),a("p",[s._v("整个 patch 无非就是干三件事：")]),s._v(" "),a("ul",[a("li",[s._v("创建节点：新的 VNode 中有而旧的 oldVNode 中没有，就在旧的 oldVNode 中创建。")]),s._v(" "),a("li",[s._v("删除节点：新的 VNode 中没有而旧的 oldVNode 中有，就从旧的 oldVNode 中删除。")]),s._v(" "),a("li",[s._v("更新节点：新的 VNode 和旧的 oldVNode 中都有，就以新的 VNode 为准，更新旧的 oldVNode")])]),s._v(" "),a("h2",{attrs:{id:"diff的具体过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff的具体过程"}},[s._v("#")]),s._v(" diff的具体过程")]),s._v(" "),a("ol",[a("li",[s._v("先标记新、旧节点的开始和结束位置")]),s._v(" "),a("li",[s._v("进行循环处理节点\n"),a("ol",[a("li",[s._v("新节点数组中第一个节点和旧数组中的第一个节点对比，相同，直接用新节点复用老节点，进行 patchVNode 复用")]),s._v(" "),a("li",[s._v("不同：新数组里面的最后一个节点和旧数组里的最后一个节点对比，相同，直接用新节点复用老节点")]),s._v(" "),a("li",[s._v("不同：再把新数组的最后一个节点和旧数组中第一个节点对比\n"),a("ul",[a("li",[s._v("如果相同，直接用新节点复用老节点")]),s._v(" "),a("li",[s._v("更新完后，再将旧数组中的该节点移动到 与新节点相同的位置")])])]),s._v(" "),a("li",[s._v("不同：把新节点中第一个节点和旧数组中最后一个节点做对比")]),s._v(" "),a("li",[s._v("不同：查看旧数组中是否有新数组的第一个节点，没有就直接在新节点中插入")])])]),s._v(" "),a("li",[s._v("递归处理")])]),s._v(" "),a("h2",{attrs:{id:"什么是虚拟-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是虚拟-dom"}},[s._v("#")]),s._v(" 什么是虚拟 DOM？")]),s._v(" "),a("p",[s._v("所谓虚拟 DOM，就是用一个 JS 对象来描述一个 DOM 节点，像如下示例：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("div "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("我是内容"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 元素标签")]),s._v("\n  attrs"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 属性")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  text"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'我是内容'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 文本内容")]),s._v("\n  children"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 子元素")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"为什么要有虚拟-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有虚拟-dom"}},[s._v("#")]),s._v(" 为什么要有虚拟 DOM？")]),s._v(" "),a("p",[s._v("Vue 是数据驱动视图的，数据发生变化视图就要随之更新，在更新视图的时候难免要操作 DOM,而操作真实 DOM 又是非常耗费性能的，这是因为浏览器的标准就把 DOM 设计的非常复杂，所以一个真正的 DOM 元素是非常庞大的")]),s._v(" "),a("p",[s._v("一个简单的空 div 标签，就打印出这么多东西，更不用说复杂的、深嵌套的 DOM 节点了。由此可见，直接操作真实 DOM 是非常消耗性能的。")]),s._v(" "),a("p",[s._v("我们可以用 JS 的计算性能来换取操作 DOM 所消耗的性能。")]),s._v(" "),a("p",[s._v("既然我们逃不掉操作 DOM 这道坎,但是我们可以尽可能少的操作 DOM。那如何在更新视图的时候尽可能少的操作 DOM 呢？最直观的思路就是我们不要盲目的去更新视图，而是通过对比数据变化前后的状态，计算出视图中哪些地方需要更新，只更新需要更新的地方，而不需要更新的地方则不需关心，这样我们就可以尽可能少的操作 DOM 了。这也就是上面所说的用 JS 的计算性能来换取操作 DOM 的性能。")]),s._v(" "),a("p",[s._v("我们可以用 JS 模拟出一个 DOM 节点，称之为虚拟 DOM 节点。当数据发生变化时，我们对比变化前后的虚拟 DOM 节点，通过 DOM-Diff 算法计算出需要更新的地方，然后去更新需要更新的视图。")]),s._v(" "),a("p",[s._v("这就是虚拟 DOM 产生的原因以及最大的用途。")])])}),[],!1,null,null,null);t.default=e.exports}}]);