(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{608:function(e,v,_){"use strict";_.r(v);var t=_(2),r=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"双向绑定原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定原理"}},[e._v("#")]),e._v(" 双向绑定原理")]),e._v(" "),_("p",[e._v("Vue 采用"),_("strong",[e._v("数据劫持")]),e._v("&"),_("strong",[e._v("发布订阅模式")]),e._v("的方式\n通过"),_("code",[e._v("Object.defineProperty()")]),e._v("方式来劫持（监控）各属性的 getter、setter，并在数据发生变动时通知订阅者，触发响应的监听回调")]),e._v(" "),_("ol",[_("li",[e._v("当一个Vue实例创建时，Vue 会遍历"),_("code",[e._v("data")]),e._v("的属性")]),e._v(" "),_("li",[e._v("通过"),_("code",[e._v("Object.defineProperty()")]),e._v("把它们转换为 "),_("code",[e._v("getter/setter")]),e._v("，并在内部追踪相关依赖")]),e._v(" "),_("li",[e._v("属性被访问和修改时通知变化")]),e._v(" "),_("li",[e._v("每个组件实例都有相应的 "),_("code",[e._v("watcher")]),e._v("，它会在组件渲染过程中，把属性记录为依赖")]),e._v(" "),_("li",[e._v("之后当依赖项的setter呗调用时，会通知"),_("code",[e._v("watcher")]),e._v("重新计算，保证关联组件更新")])]),e._v(" "),_("h2",{attrs:{id:"双向绑定大致可以分为三块-observer、compiler、watcher"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定大致可以分为三块-observer、compiler、watcher"}},[e._v("#")]),e._v(" 双向绑定大致可以分为三块：observer、compiler、watcher")]),e._v(" "),_("ul",[_("li",[e._v("observer 数据监听器：对数据对象的所有属性进行监听，监听到变化后通知订阅者")]),e._v(" "),_("li",[e._v("compiler 指令解析器：扫描模板，并对指令进行解析，绑定指定事件")]),e._v(" "),_("li",[e._v("watcher 订阅者：关联 observer 和 compiler，订阅并接收属性变化的通知，执行指令绑定的操作，去更新视图（update()方法用于执行 compiler 中绑定的回调）")])]),e._v(" "),_("h2",{attrs:{id:"双向绑定的特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定的特点"}},[e._v("#")]),e._v(" 双向绑定的特点")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("🐵 Vue 采用"),_("strong",[e._v("数据劫持")]),e._v("&"),_("strong",[e._v("发布订阅模式")]),e._v("的方式的优点：")]),e._v(" "),_("ol",[_("li",[e._v("不需要显示的调用，可以直接通知变化和驱动视图")]),e._v(" "),_("li",[e._v("得到进准的数据变化，不需要额外的 diff 操作")])])]),e._v(" "),_("li",[_("p",[e._v("📚 Object.defineProperty()缺点：")]),e._v(" "),_("ol",[_("li",[e._v("不能监听数组")]),e._v(" "),_("li",[e._v("不能监听整个对象，只能监听属性，需要遍历属性")]),e._v(" "),_("li",[e._v("只能监听属性变化，不能监听属性的删减")])])]),e._v(" "),_("li",[_("p",[e._v("🐶 proxy的好处：")]),e._v(" "),_("ol",[_("li",[e._v("可以监听数组")]),e._v(" "),_("li",[e._v("监听的是整个对象")]),e._v(" "),_("li",[e._v("13种拦截方法")]),e._v(" "),_("li",[e._v("返回的是新对象而不是直接修改原对象，更符合immutable")])])])]),e._v(" "),_("h2",{attrs:{id:"vue事件循环"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue事件循环"}},[e._v("#")]),e._v(" vue事件循环")]),e._v(" "),_("p",[e._v("Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新")]),e._v(" "),_("p",[e._v("Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。")]),e._v(" "),_("p",[e._v("nextTick使用：在下次 DOM 更新循环结束之后执行延迟回调")])])}),[],!1,null,null,null);v.default=r.exports}}]);