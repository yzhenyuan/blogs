(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{544:function(a,s,t){"use strict";t.r(s);var r=t(2),n=Object(r.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"javascript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[a._v("#")]),a._v(" Javascript")]),a._v(" "),t("p",[a._v("什么是 JavaScript？\nJavaScript 是一门解释型的动态语言。")]),a._v(" "),t("p",[a._v("解释型语言是相对于编译型语言存在的，源代码不是直接编译为目标代码，而是转成中间代码，再由解释器对中间代码进行解释运行。")]),a._v(" "),t("p",[a._v("主流编程语言有"),t("strong",[a._v("编译型")]),a._v("（如 C++）、"),t("strong",[a._v("解释型")]),a._v("（如 JavaScript）、和"),t("strong",[a._v("半解释半编译")]),a._v("（如 Java）这几大类型。")]),a._v(" "),t("h2",{attrs:{id:"一、代码是怎么运行的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、代码是怎么运行的"}},[a._v("#")]),a._v(" 一、代码是怎么运行的？")]),a._v(" "),t("p",[a._v("代码是由 "),t("strong",[a._v("CPU")]),a._v(" 执行的，而 CPU 并不能直接执行诸如 if…else 之类的语句，它只能执行二进制指令。")]),a._v(" "),t("p",[a._v("但是二进制指令对人类实在是太不友好了：我们很难快速准确的判断一个二进制指令 1000010010101001 代表什么？所以科学家们发明汇编语言。")]),a._v(" "),t("h2",{attrs:{id:"二、汇编语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、汇编语言"}},[a._v("#")]),a._v(" 二、汇编语言")]),a._v(" "),t("p",[t("strong",[a._v("汇编语言实际上就是二进制指令的助记符")]),a._v("。")]),a._v(" "),t("p",[a._v("假设 10101010 代表读取内存操作，内存地址是 10101111，寄存器地址是 11111010，那么完整的操作 101010101010111111111010 就代表读取某个内存地址的值并装载到寄存器，而汇编语言并没有改变这种操作方式，它只是二进制指令的映射：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("LD：10101010\nid:10101111\nR:11111010\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("这样上述指令就可以表达为 LD id R ，大大增强了代码的可读性。")]),a._v(" "),t("p",[a._v("但是这样还不够友好，CPU 只能执行地址表达式，和人的思考方式、语言模式相距甚远。所以伟大的科学家们又发明了高级语言。")]),a._v(" "),t("h2",{attrs:{id:"三、高级语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、高级语言"}},[a._v("#")]),a._v(" 三、高级语言")]),a._v(" "),t("p",[a._v("“代码是写给人看的，不是写给机器看的，只是顺便计算机可以执行而已。”")]),a._v(" "),t("h3",{attrs:{id:"_3-1-编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-编译"}},[a._v("#")]),a._v(" 3.1 编译")]),a._v(" "),t("p",[a._v("高级语言之所以称之为“高级”，就是因为它更加符合我们的思维和阅读习惯。if…else 这种语句看起来要比 1010101010 舒服的多了。但是计算机并不能直接执行高级语言，所以还需要把高级语言转化为汇编语言/机器指令才能执行。这个过程就是编译。")]),a._v(" "),t("p",[a._v("❓ JavaScript 需要编译吗？JavaScript 毫无疑问是高级语言，所以它肯定是需要编译后才能执行。")]),a._v(" "),t("p",[a._v("🚗 把"),t("strong",[a._v("高级语言")]),a._v("转化为 "),t("strong",[a._v("汇编语言/机器指令")]),a._v(" 的过程 就是编译")]),a._v(" "),t("h3",{attrs:{id:"_3-2-跨平台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-跨平台"}},[a._v("#")]),a._v(" 3.2 跨平台")]),a._v(" "),t("p",[a._v("同样一份 C++代码在 Windows 上会编译成.obj 文件，而在 Linux 上则生成.o 文件，两者不能通用。")]),a._v(" "),t("p",[a._v("这是因为一个可执行文件除了代码外还需要操作系统 API、内存、线程、进程等系统资源，而不同的操作系统其实现也不尽相同。")]),a._v(" "),t("p",[a._v("所以针对不同的平台，编译型语言需要分别编译，甚至需要分别编写，而且生成的可执行文件其格式并不相同。")]),a._v(" "),t("h4",{attrs:{id:"java-实现跨平台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-实现跨平台"}},[a._v("#")]),a._v(" Java 实现跨平台")]),a._v(" "),t("p",[a._v("Java 在此之上通过引入字节码实现了跨平台运行：")]),a._v(" "),t("ol",[t("li",[a._v("无论是在什么操作系统上.java 文件编译出的都是.class 文件（这就是字节码文件，一种中间形态的目标代码）。")]),a._v(" "),t("li",[a._v("对不同的系统提供不同的 Java 虚拟机用于解释执行字节码文件。解释执行并不生成目标代码，但其最终还是要转为汇编/二进制指令来给计算机执行的。")])]),a._v(" "),t("p",[a._v("假如我们自己完全独立的新写一个简单的操作系统，那么它能不能运行 Java 呢？很显然是不能的，因为并没有这个系统相应的 JVM。所以 Java 的跨平台、任何其他语言的跨平台，都是有局限性的。")]),a._v(" "),t("p",[a._v("Java 采用半解释半编译的好处就是大大提升了开发效率，然而相应的则降低了代码的执行效率，毕竟虚拟机是有性能损失的。")]),a._v(" "),t("h3",{attrs:{id:"_3-3-解释执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-解释执行"}},[a._v("#")]),a._v(" 3.3 解释执行")]),a._v(" "),t("p",[a._v("JavaScript 则更进一步。它是完全的解释执行，或者叫做即时编译。它不会有中间代码生成，也不会有目标代码生成。这个过程通常由宿主环境（如浏览器、Node.js）包办。")]),a._v(" "),t("h2",{attrs:{id:"四、js-编译过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、js-编译过程"}},[a._v("#")]),a._v(" 四、JS 编译过程")]),a._v(" "),t("p",[a._v("解释执行的语言，也是需要编译的。那么代码是如何编译的呢？")]),a._v(" "),t("p",[a._v("有这么几个步骤：")]),a._v(" "),t("ul",[t("li",[a._v("词法分析")]),a._v(" "),t("li",[a._v("语法分析")]),a._v(" "),t("li",[a._v("优化及代码生成")])]),a._v(" "),t("h3",{attrs:{id:"词法分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[a._v("#")]),a._v(" 词法分析")]),a._v(" "),t("p",[a._v("词法分析会把语句分解成词法单元，即 Token。")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("square")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("n")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("这个函数会被词法分析器识别为 "),t("code",[a._v("function，square，(，n，)，{，return，，n ,\\*，n ，}")]),a._v("并且给它们加上标注，代表这是一个变量还是一个操作。")]),a._v(" "),t("h3",{attrs:{id:"语法分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[a._v("#")]),a._v(" 语法分析")]),a._v(" "),t("p",[a._v("这个过程会把 Token 转化成抽象语法树（AST）：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    type"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'function'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    id"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        type"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'id'")]),a._v("\n        name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'square'")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    params"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            type"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'id'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'n'")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("h3",{attrs:{id:"优化及代码生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化及代码生成"}},[a._v("#")]),a._v(" 优化及代码生成")]),a._v(" "),t("p",[a._v("在这一步编译器会做一些优化工作，比如删除多余运算、删除未用赋值、合并部分变量等等操作，最后生成目标代码。")]),a._v(" "),t("p",[a._v("由于即时编译型语言的编译通常发生在运行前几微秒，所以编译器来不及做太多的优化工作。这也是相比编译型语言，早期 JavaScript 性能孱弱的原因之一。")]),a._v(" "),t("p",[a._v("不过就现在而言，\n益于 V8 引擎（相比早期的 JavaScript 的引擎转换成字节码或解释执行，Node.js 可以用 V8 提供的 JS2C 工具将 JavaScript 转译为 C++代码）")]),a._v(" "),t("h3",{attrs:{id:"链接及装载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链接及装载"}},[a._v("#")]),a._v(" 链接及装载")]),a._v(" "),t("p",[a._v("目标代码基本不能独立运行。应用程序一般都会由多个部分（模块）组成 ，比如 C++中一个简单的输出就要引入标准库 iostream：")]),a._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('#include <iostream>\nusing namespace std;\nint main(){\n cout << "Happy Hacking!\\n";\n return 0;\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("编译器需要把多份目标代码（库）链接起来才能生成可执行文件")]),a._v(" "),t("h2",{attrs:{id:"五、什么是动态语言-动态类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、什么是动态语言-动态类型"}},[a._v("#")]),a._v(" 五、什么是动态语言，动态类型？")]),a._v(" "),t("h3",{attrs:{id:"那么什么是动态语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#那么什么是动态语言"}},[a._v("#")]),a._v(" 那么什么是动态语言？")]),a._v(" "),t("p",[a._v("JavaScript 是动态语言。通常来说，这是指在"),t("strong",[a._v("运行时")]),a._v("代码可以根据某些条件改变自身结构的语言。")]),a._v(" "),t("p",[a._v("比如 JavaScript 在运行时新的函数、对象、甚至代码都可以被引进（eval）")]),a._v(" "),t("p",[a._v("JavaScript 又是一门动态类型的语言，动态类型又是什么？动态类型的定义倒是很明确：数据类型不是在编译阶段确定，而是在运行时确定。")]),a._v(" "),t("h3",{attrs:{id:"typescript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[a._v("#")]),a._v(" TypeScript")]),a._v(" "),t("p",[a._v("❓ 那么 TypeScript 是什么类型的语言呢？它有静态类型检查，它是静态语言吗？实际上它只是 JavaScript 的一个方言。")]),a._v(" "),t("p",[a._v("TypeScript 最终还是要转译为 JavaScript 才能执行（tsc），就如同我们使用 babel 把 ES6 代码转译为 ES5 一样。🚗 这个过程严格上来说不是编译。")]),a._v(" "),t("p",[a._v("TypeScript 最大的优势就是"),t("strong",[a._v("静态类型检查")]),a._v("和"),t("strong",[a._v("类型推断")]),a._v("，这是 JavaScript 严重缺失的能力。")]),a._v(" "),t("blockquote",[t("p",[a._v("如果我们忽略 IDE 给的报错提示强行运行 TS 代码，也还是有几率能够成功跑起来的。")])]),a._v(" "),t("h2",{attrs:{id:"六、错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、错误"}},[a._v("#")]),a._v(" 六、错误")]),a._v(" "),t("p",[a._v("刚刚我们提到报错，不妨再扩展说一说错误。通常来说错误分为以下几种：")]),a._v(" "),t("ul",[t("li",[a._v("编译时错误")]),a._v(" "),t("li",[a._v("链接时错误")]),a._v(" "),t("li",[a._v("运行时错误")])]),a._v(" "),t("p",[a._v("是不是和编译过程能够严格对应起来？")]),a._v(" "),t("h3",{attrs:{id:"_6-1-编译时错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-编译时错误"}},[a._v("#")]),a._v(" 6.1 编译时错误")]),a._v(" "),t("h5",{attrs:{id:"语法错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法错误"}},[a._v("#")]),a._v(" 语法错误")]),a._v(" "),t("p",[a._v("var str ='s ;\n这就是典型的语法错误，这种代码无法生成 AST，在词法分析阶段就会报错。通常我们这么写代码，IDE 就会报错。这是 IDE 的优化工作，和词法分析相关。")]),a._v(" "),t("h5",{attrs:{id:"类型错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型错误"}},[a._v("#")]),a._v(" 类型错误")]),a._v(" "),t("p",[a._v("编译器会检查我们声明的变量和函数的类型，JavaScript 中我们非常熟悉的 Type Error:undefined is not object 就是此类错误。")]),a._v(" "),t("h3",{attrs:{id:"_6-2-链接时错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-链接时错误"}},[a._v("#")]),a._v(" 6.2 链接时错误")]),a._v(" "),t("p",[a._v("在链接阶段发生的异常。这种情况 JavaScript 中比较少见，在编译型语言中比较常见。")]),a._v(" "),t("h3",{attrs:{id:"_6-3-运行时错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-运行时错误"}},[a._v("#")]),a._v(" 6.3 运行时错误")]),a._v(" "),t("p",[a._v("这是最难排查的错误了，举例来说：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("divider")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("上面的代码在编辑编译、链接阶段都没问题，也能够正常的生成可执行文件。但是一旦如此使用 divider(1,0)就会报错了，这就是典型的运行时错误。通常来说运行时错误都是程序不够健壮导致的。")])])}),[],!1,null,null,null);s.default=n.exports}}]);