(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{527:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("数据结构是在计算机中存储数据的一种特殊方式，使得数据可以高效地被访问和修改。更确切地说，数据结构是数据值的集合，表示数据之间的关系，也包括了作用在数据上的函数或操作。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://api.zhanggaoyuan.com/uploads/images/articles/201904/20/1_1555733566_xcaWlw6beH.png",alt:"数据结构与算法知识总揽"}})]),t._v(" "),s("h3",{attrs:{id:"复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂度"}},[t._v("#")]),t._v(" 复杂度")]),t._v(" "),s("p",[t._v("算法和数据结构是为了让程序跑的更快更稳定，简言之就是让代码运行更快，存储更省空间。所以我们必须了解自己写的代码的复杂度，即时间复杂度，空间复杂度。")]),t._v(" "),s("h2",{attrs:{id:"一、时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、时间复杂度"}},[t._v("#")]),t._v(" 一、时间复杂度")]),t._v(" "),s("p",[t._v("通俗点说，我们程序运行一个算法需要多长时间。它和执行每一条语句的耗时以及每一条语句的执行频率相关。我们用 “大 O 表示法” 表示时间复杂度。")]),t._v(" "),s("blockquote",[s("p",[t._v("我们认为时间复杂度为 O(n)、O(log2N)、O(n^2) 是高效的算法。对于合理大的 n，O(n^3) 也是可以接受的。")])]),t._v(" "),s("h2",{attrs:{id:"二、空间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、空间复杂度"}},[t._v("#")]),t._v(" 二、空间复杂度")]),t._v(" "),s("p",[t._v("既然时间复杂度不是用来计算程序具体耗时的，那么我也应该明白，空间复杂度也不是用来计算程序实际占用的空间的。")]),t._v(" "),s("p",[t._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) 来定义。")]),t._v(" "),s("p",[t._v("万物都有容量，而应用程序的容器就是内存，内存暂用率越高，程序越容易崩溃。内存的基本单位是字节，一般一个字母或数字占用一个字节（byte），单位间的换算可以参照下面的公式。空间是有限的，如果你一次性读取 1000 万条数据到内存中，程序可能或崩溃，所以我们编写程序的时候，用必须考虑到空间复杂度，不过它的问题已经得到了一点缓解，现代机器存储已经大大提升了。")]),t._v(" "),s("h5",{attrs:{id:"根据时间复杂度的推算-忽略掉常数量级-每次数组赋值都会申请一个空间存储变量-所以此函数的空间复杂度为-o-n-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据时间复杂度的推算-忽略掉常数量级-每次数组赋值都会申请一个空间存储变量-所以此函数的空间复杂度为-o-n-。"}},[t._v("#")]),t._v(" 根据时间复杂度的推算，忽略掉常数量级，每次数组赋值都会申请一个空间存储变量，所以此函数的空间复杂度为 O(n)。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initArr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("空间复杂度比较常用的有：O(1)、O(n)、O(n²)")]),t._v(" "),s("h2",{attrs:{id:"常见的时间复杂度阶数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的时间复杂度阶数"}},[t._v("#")]),t._v(" 常见的时间复杂度阶数")]),t._v(" "),s("p",[t._v("🔽")]),t._v(" "),s("ul",[s("li",[t._v("常数阶 O(1)：即算法的计算量不随着输入规模的变化而变化。")]),t._v(" "),s("li",[t._v("O(logN)(对数阶)")]),t._v(" "),s("li",[t._v("线性阶 O(n)")]),t._v(" "),s("li",[t._v("O(nlogN)(线性对数阶) n * logN")]),t._v(" "),s("li",[t._v("O(n^2)(平方阶)")]),t._v(" "),s("li",[t._v("O(n^3)(立方阶)")]),t._v(" "),s("li",[t._v("多项式阶 O(n^c)：常见的多项式阶如 O(n^2)、O(n^3)")]),t._v(" "),s("li",[t._v("指数阶 O(C^n)：常见的指数阶如 O(2^n)")])]),t._v(" "),s("p",[t._v("越往底层越需要算法\n线性表的衍生结构有三种\n基于读写位置受限\n串：字符串属于静态变量")])])}),[],!1,null,null,null);a.default=r.exports}}]);