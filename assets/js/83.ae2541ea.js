(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{593:function(e,o,v){"use strict";v.r(o);var t=v(2),_=Object(t.a)({},(function(){var e=this,o=e.$createElement,v=e._self._c||o;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"vue-中的-dom-diff"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-中的-dom-diff"}},[e._v("#")]),e._v(" Vue 中的 DOM-Diff")]),e._v(" "),v("p",[e._v("在 Vue 中，把 DOM-Diff 过程叫做"),v("strong",[e._v("patch 过程")]),e._v("（核心）。patch,意为“补丁”，即指对旧的 VNode 修补，打补丁从而得到新的 VNode。")]),e._v(" "),v("p",[e._v("总之一句话：以新的 VNode 为基准，改造旧的 oldVNode 使之成为跟新的 VNode 一样，这就是 patch 过程要干的事。")]),e._v(" "),v("p",[e._v("整个 patch 无非就是干三件事：")]),e._v(" "),v("ul",[v("li",[e._v("创建节点：新的 VNode 中有而旧的 oldVNode 中没有，就在旧的 oldVNode 中创建。")]),e._v(" "),v("li",[e._v("删除节点：新的 VNode 中没有而旧的 oldVNode 中有，就从旧的 oldVNode 中删除。")]),e._v(" "),v("li",[e._v("更新节点：新的 VNode 和旧的 oldVNode 中都有，就以新的 VNode 为准，更新旧的 oldVNode")])]),e._v(" "),v("h2",{attrs:{id:"diff的具体过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#diff的具体过程"}},[e._v("#")]),e._v(" diff的具体过程")]),e._v(" "),v("ol",[v("li",[e._v("先标记新、旧节点的开始和结束位置")]),e._v(" "),v("li",[e._v("进行循环处理节点\n"),v("ol",[v("li",[e._v("新节点数组中第一个节点和旧数组中的第一个节点对比，相同，直接用新节点复用老节点，进行 patchVNode 复用")]),e._v(" "),v("li",[e._v("不同：新数组里面的最后一个节点和旧数组里的最后一个节点对比，相同，直接用新节点复用老节点")]),e._v(" "),v("li",[e._v("不同：再把新数组的最后一个节点和旧数组中第一个节点对比\n"),v("ul",[v("li",[e._v("如果相同，直接用新节点复用老节点")]),e._v(" "),v("li",[e._v("更新完后，再将旧数组中的该节点移动到 与新节点相同的位置")])])]),e._v(" "),v("li",[e._v("不同：把新节点中第一个节点和旧数组中最后一个节点做对比")]),e._v(" "),v("li",[e._v("不同：查看旧数组中是否有新数组的第一个节点，没有就直接在新节点中插入")])])]),e._v(" "),v("li",[e._v("递归处理")])])])}),[],!1,null,null,null);o.default=_.exports}}]);