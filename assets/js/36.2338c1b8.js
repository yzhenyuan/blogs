(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{545:function(t,v,_){"use strict";_.r(v);var l=_(2),n=Object(l.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),_("ol",[_("li",[t._v("——单体模式")]),t._v(" "),_("li",[t._v("——工厂模式")]),t._v(" "),_("li",[t._v("——迭代器模式")]),t._v(" "),_("li",[t._v("——装饰者模式")]),t._v(" "),_("li",[t._v("——策略模式")]),t._v(" "),_("li",[t._v("——外观模式")]),t._v(" "),_("li",[t._v("——代理模式")]),t._v(" "),_("li",[t._v("——中介者模式")]),t._v(" "),_("li",[t._v("——观察者模式")])]),t._v(" "),_("h2",{attrs:{id:"一、单体模式-singleton-pattern"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、单体模式-singleton-pattern"}},[t._v("#")]),t._v(" 一、单体模式(Singleton Pattern)")]),t._v(" "),_("p",[t._v("1.概念介绍\n**单体模式(Singleton Pattern)**的思想在于保证一个特定类仅有一个实例，即不管使用这个类创建多少个新对象，都会得到与第一次创建的对象完全相同。")]),t._v(" "),_("p",[t._v("它让我们能将代码组织成一个逻辑单元，并可以通过单一变量进行访问。")]),t._v(" "),_("p",[t._v("单体模式有以下优点：")]),t._v(" "),_("ul",[_("li",[t._v("用来划分命名空间，减少全局变量数量。")]),t._v(" "),_("li",[t._v("使代码组织的更一致，提高代码阅读性和维护性。")]),t._v(" "),_("li",[t._v("只能被实例化一次。")])]),t._v(" "),_("p",[t._v("但在JavaScript中没有类，只有对象。当我们创建一个新对象，它都是个新的单体，因为JavaScript中永远不会有完全相等的对象，除非它们是同一个对象。\n因此，我们每次使用对象字面量创建对象的时候，实际上就是在创建一个单例。")])])}),[],!1,null,null,null);v.default=n.exports}}]);