(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{536:function(t,v,a){"use strict";a.r(v);var _=a(2),s=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("h2",{attrs:{id:"什么是作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域"}},[t._v("#")]),t._v(" 什么是作用域")]),t._v(" "),a("h2",{attrs:{id:"全局作用域和函数作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域和函数作用域"}},[t._v("#")]),t._v(" 全局作用域和函数作用域")]),t._v(" "),a("h2",{attrs:{id:"块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域"}},[t._v("#")]),t._v(" 块级作用域")]),t._v(" "),a("p",[t._v("let const")]),t._v(" "),a("h2",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),a("h2",{attrs:{id:"作用域与执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域与执行上下文"}},[t._v("#")]),t._v(" 作用域与执行上下文")]),t._v(" "),a("p",[t._v("解释阶段：")]),t._v(" "),a("ul",[a("li",[t._v("词法分析")]),t._v(" "),a("li",[t._v("语法分析")]),t._v(" "),a("li",[t._v("作用域规则确定")])]),t._v(" "),a("p",[t._v("执行阶段：")]),t._v(" "),a("ul",[a("li",[t._v("创建执行上下文")]),t._v(" "),a("li",[t._v("执行函数代码")]),t._v(" "),a("li",[t._v("垃圾回收")])]),t._v(" "),a("p",[t._v("作用域和执行上下文之间最大的区别是：")]),t._v(" "),a("p",[t._v("执行上下文在运行时确定，随时可能改变；作用域在定义时就确定，并且不会改变")]),t._v(" "),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("p",[t._v("变量的作用域无非就是两种：全局变量和局部变量。")]),t._v(" "),a("p",[t._v("Javascript 语言的特殊之处，就在于函数内部可以直接读取全局变量。")]),t._v(" "),a("p",[t._v("在函数外部自然无法读取函数内的局部变量。")]),t._v(" "),a("p",[t._v("闭包就是能够读取其他函数内部变量的函数")]),t._v(" "),a("p",[t._v("闭包就是将函数内部和函数外部连接起来的一座桥梁")]),t._v(" "),a("p",[t._v("用途：")]),t._v(" "),a("ol",[a("li",[t._v("可以读取函数内部的变量")]),t._v(" "),a("li",[t._v("让这些变量的值始终保持在内存中")])])])}),[],!1,null,null,null);v.default=s.exports}}]);