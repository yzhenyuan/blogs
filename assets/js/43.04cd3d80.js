(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{557:function(t,s,a){"use strict";a.r(s);var e=a(2),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-类型"}},[t._v("#")]),t._v(" js 类型")]),t._v(" "),a("p",[t._v("js 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。")]),t._v(" "),a("h2",{attrs:{id:"一、js-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、js-数据类型"}},[t._v("#")]),t._v(" 一、js 数据类型")]),t._v(" "),a("h3",{attrs:{id:"基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),a("p",[t._v("js 一共有六种基本数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("Undefined、Null、Boolean、Number、String")]),t._v(" "),a("li",[t._v("ES6 中新增的 Symbol")]),t._v(" "),a("li",[t._v("ES10 中新增的 BigInt 类型。")])]),t._v(" "),a("p",[t._v("Symbol 代表创建后独一无二且不可变的数据类型，它的出现我认为主要是为了解决可能出现的全局变量冲突的问题。")]),t._v(" "),a("p",[t._v("BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。")]),t._v(" "),a("h4",{attrs:{id:"null-和-undefined-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-的区别"}},[t._v("#")]),t._v(" null 和 undefined 的区别")]),t._v(" "),a("p",[t._v("这两个基本数据类型分别都只有一个值，就是 undefined 和 null")]),t._v(" "),a("p",[t._v("undefined 代表的含义是未定义，null 代表的含义是空对象")]),t._v(" "),a("p",[t._v("我们用 void 0 来获得 undefined")]),t._v(" "),a("p",[t._v("当我们对两种类型使用 typeof 进行判断的时候，Null 类型化会返回 “object”，这是一个历史遗留的问题。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"复杂数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂数据类型"}},[t._v("#")]),t._v(" 复杂数据类型")]),t._v(" "),a("p",[t._v("复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。")]),t._v(" "),a("h2",{attrs:{id:"二、堆-栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、堆-栈"}},[t._v("#")]),t._v(" 二、堆 & 栈")]),t._v(" "),a("p",[t._v("两种类型间的主要区别是它们的存储位置不同：")]),t._v(" "),a("ul",[a("li",[t._v("基本数据类型的值直接保存在栈中")]),t._v(" "),a("li",[t._v("复杂数据类型的值保存在堆中，通过使用在栈中保存对应的指针来获取堆中的值。")])]),t._v(" "),a("h3",{attrs:{id:"什么是堆-什么是栈-它们之间有什么区别和联系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是堆-什么是栈-它们之间有什么区别和联系"}},[t._v("#")]),t._v(" 什么是堆？什么是栈？它们之间有什么区别和联系？")]),t._v(" "),a("p",[t._v("堆和栈的概念存在于数据结构中和操作系统内存中。")]),t._v(" "),a("h4",{attrs:{id:"数据结构中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构中"}},[t._v("#")]),t._v(" 数据结构中")]),t._v(" "),a("ol",[a("li",[t._v("在数据结构中，栈中数据的存取方式为先进后出。而堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。")]),t._v(" "),a("li",[t._v("完全二叉树是堆的一种实现方式。")])]),t._v(" "),a("h4",{attrs:{id:"操作系统中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统中"}},[t._v("#")]),t._v(" 操作系统中")]),t._v(" "),a("p",[t._v("在操作系统中，内存被分为栈区和堆区。")]),t._v(" "),a("ul",[a("li",[t._v("栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。")]),t._v(" "),a("li",[t._v("堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);