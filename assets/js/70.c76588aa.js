(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{587:function(e,r,t){"use strict";t.r(r);var _=t(2),a=Object(_.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[e._v("#")]),e._v(" React")]),e._v(" "),t("p",[e._v("vue 注重编译时优化，proxy 精确的找到变动的节点\nreact 针对运行时优化，考虑如何不阻塞用户交互之类的")]),e._v(" "),t("h2",{attrs:{id:"一、版本对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、版本对比"}},[e._v("#")]),e._v(" 一、版本对比")]),e._v(" "),t("h3",{attrs:{id:"_1-1-第-15-版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-第-15-版"}},[e._v("#")]),e._v(" 1.1 第 15 版")]),e._v(" "),t("p",[e._v("主要成分：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("reconciler 找到更新的组件")])]),e._v(" "),t("li",[t("p",[e._v("renderer 渲染页面")])]),e._v(" "),t("li",[t("p",[e._v("🐔 优化：做了批量更新的优化")])]),e._v(" "),t("li",[t("p",[e._v("🐧 缺点：递归的，一个长任务，会阻塞 UI 渲染")])])]),e._v(" "),t("h3",{attrs:{id:"_1-2-第-16-版-fiber-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-第-16-版-fiber-架构"}},[e._v("#")]),e._v(" 1.2 第 16 版 fiber 架构")]),e._v(" "),t("ol",[t("li",[e._v("主要分成\n"),t("ul",[t("li",[e._v("reconciler 找到更新的组件")]),e._v(" "),t("li",[e._v("renderer 渲染页面")]),e._v(" "),t("li",[e._v("Scheduler 调度优先级 new +")])])]),e._v(" "),t("li",[e._v("优化部分：\n"),t("ul",[t("li",[e._v("把调度任务放在宏任务中，保证不让用户失去响应")]),e._v(" "),t("li",[e._v("对任务做了优先级的响应，高优先级可以先中断低优先级")])])]),e._v(" "),t("li",[e._v("缺点：把优先级分为更详细的情况处理不了\n"),t("ol",[t("li",[e._v("cpu 任务")]),e._v(" "),t("li",[e._v("io 任务")])])])]),e._v(" "),t("h4",{attrs:{id:"fiber-fiber-和-fiber-之间以链表的形式连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fiber-fiber-和-fiber-之间以链表的形式连接"}},[e._v("#")]),e._v(" fiber：fiber 和 fiber 之间以链表的形式连接")]),e._v(" "),t("h3",{attrs:{id:"_1-3-第-17-版-对优先级做了一个扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-第-17-版-对优先级做了一个扩展"}},[e._v("#")]),e._v(" 1.3 第 17 版 对优先级做了一个扩展")]),e._v(" "),t("p",[e._v("从指定的优先级 --\x3e 到指定一个连续的优先级的区间")]),e._v(" "),t("h2",{attrs:{id:"二、scheduler-调度器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、scheduler-调度器"}},[e._v("#")]),e._v(" 二、Scheduler 调度器")]),e._v(" "),t("p",[e._v("调度任务的优先级，高优先任务先进入 Reconciler")]),e._v(" "),t("p",[e._v("🦌 优先级是跟时间绑定的，随着时间的流逝优先级会往上升")]),e._v(" "),t("h3",{attrs:{id:"_2-1-优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-优先级"}},[e._v("#")]),e._v(" 2.1 优先级")]),e._v(" "),t("ol",[t("li",[e._v("生命周期方法：同步任务")]),e._v(" "),t("li",[e._v("受控的用户输入：比如输入框输入文字，同步")]),e._v(" "),t("li",[e._v("交互事件：比如动画")]),e._v(" "),t("li",[e._v("其他：比如数据请求，低优先级任务")])]),e._v(" "),t("h3",{attrs:{id:"_2-2-流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-流程"}},[e._v("#")]),e._v(" 2.2 流程：")]),e._v(" "),t("p",[e._v("调度逻辑：")]),e._v(" "),t("ol",[t("li",[e._v("fiberNode 通过 this.return、this.sibling 组建 fiberTree")]),e._v(" "),t("li",[e._v("每次更新 执行 setState")]),e._v(" "),t("li",[e._v("判断任务\n"),t("ol",[t("li",[e._v("同步任务，立刻调度，意味着优先级是最高的，没有任何任务可以打断他")]),e._v(" "),t("li",[e._v("异步任务，优先级不是很高的\n"),t("ol",[t("li",[e._v("进入 insureRootIsScheduler 方法做一些操作，\n"),t("ol",[t("li",[e._v("判断是否已经有一个 fiber 已经在运行中，如果是，判断是否是同一级别的优先级，是就做一个批处理的逻辑")]),e._v(" "),t("li",[e._v("主要进行一个新 fiber 和正在处理的中的 fiber 的判断，判断是要做一个新的更新还是要复用之前的更新")])])]),e._v(" "),t("li",[e._v("进入 unstable_schedulerCallback 方法，优先级开始发挥作用，判断有没有 delay(delay=0||delay>0)\n"),t("ol",[t("li",[e._v("有--\x3e delay>0 --\x3e添加到延时任务 time Queue")]),e._v(" "),t("li",[e._v("没有--\x3e delay==0 --\x3e添加到及时任务 task Queue\n"),t("ol",[t("li",[e._v("到宏任务中，执行一个发起更新的逻辑，宏任务中可以保证--\x3e主线程会一直处于一直响应的状态")]),e._v(" "),t("li",[e._v("每执行一个就会清空 task Queue，清空之后通过 loop 一个个的清空")]),e._v(" "),t("li",[e._v("清空完之后会判断 time Queue 中的任务到没到时间，到了就加到 task Queue 中")])])])])])])]),e._v(" "),t("li",[e._v("performSyncWorkOnRoot 方法最终把 diff render 操作更新到页面中")])])])]),e._v(" "),t("p",[e._v("两个宏任务之间间隔了主线程的调用")]),e._v(" "),t("h2",{attrs:{id:"三、-reconciler-协调器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、-reconciler-协调器"}},[e._v("#")]),e._v(" 三、 Reconciler 协调器")]),e._v(" "),t("ul",[t("li",[e._v("主要找到变化的组件")]),e._v(" "),t("li",[e._v("diff")]),e._v(" "),t("li",[e._v("生成 dom 元素")]),e._v(" "),t("li",[e._v("并不会渲染到页面，为了打断优先级（例如 diff 就比较耗时）")]),e._v(" "),t("li",[e._v("先打一个标记")])]),e._v(" "),t("h3",{attrs:{id:"_3-1-双缓存结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-双缓存结构"}},[e._v("#")]),e._v(" 3，1 双缓存结构")]),e._v(" "),t("ul",[t("li",[e._v("react 内部会同时存在两个 fiberTree")]),e._v(" "),t("li",[e._v("内部是双缓存")])]),e._v(" "),t("p",[e._v("fiberNode 中 this.alternate 指向 workInProgress Fiber(上一次构建的 fiber 镜像)，找的比较快")]),e._v(" "),t("ul",[t("li",[e._v("屏幕上显示内容对应的 fiber 树："),t("code",[e._v("current fiber")])]),e._v(" "),t("li",[e._v("正在内存中构建的 fiber 树："),t("code",[e._v("workInProgress fiber")]),e._v(" 比如更新")]),e._v(" "),t("li",[e._v("他们通过"),t("code",[e._v("alternate")]),e._v("属性链接，当 workInProgress fiber 构建完成后，通过 alternate 指向它，current fiber 就被丢弃")])]),e._v(" "),t("p",[e._v("🐅 为什么要双缓存：快速找到 fiber、某些情况下直接复用 fiber")]),e._v(" "),t("h3",{attrs:{id:"_3-2-构建-fiber-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-构建-fiber-tree"}},[e._v("#")]),e._v(" 3.2 构建 fiber tree")]),e._v(" "),t("h4",{attrs:{id:"reconciler-代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reconciler-代码"}},[e._v("#")]),e._v(" Reconciler 代码")]),e._v(" "),t("ol",[t("li",[e._v("从 "),t("code",[e._v("renderRootSync")]),e._v(" 开始，从优先级更高的 fiber root 开始递归")]),e._v(" "),t("li",[e._v("双层循环")]),e._v(" "),t("li",[t("code",[e._v("beginWork")]),e._v(" 从上到下，创建 fiber root")]),e._v(" "),t("li",[t("code",[e._v("completeWork")]),e._v(" 从下到上\n"),t("ol",[t("li",[e._v("向上递归")]),e._v(" "),t("li",[e._v("创建 DOM 节点")]),e._v(" "),t("li",[e._v("把子节点添加到父节点的链上")]),e._v(" "),t("li",[e._v("存在兄弟节点，就执行兄弟节点的 beginWork 过程")]),e._v(" "),t("li",[e._v("不存在兄弟节点，就返回父节点，执行父节点的 completeWork")])])]),e._v(" "),t("li",[e._v("next 存在，接着递归")])]),e._v(" "),t("h3",{attrs:{id:"_3-3-diff"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-diff"}},[e._v("#")]),e._v(" 3.3 diff")]),e._v(" "),t("h4",{attrs:{id:"_1-预设规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-预设规则"}},[e._v("#")]),e._v(" ① 预设规则")]),e._v(" "),t("ol",[t("li",[e._v("只对同级别作比较")]),e._v(" "),t("li",[e._v("节点变化，直接删除，然后重建")]),e._v(" "),t("li",[e._v("是否存在 key 值，对比 key 值一样的节点")])]),e._v(" "),t("h4",{attrs:{id:"_2-单节点和多节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-单节点和多节点"}},[e._v("#")]),e._v(" ② 单节点和多节点")]),e._v(" "),t("ul",[t("li",[e._v("单节点--\x3eobject、 number、string")]),e._v(" "),t("li",[e._v("多节点--\x3e数组")])]),e._v(" "),t("p",[e._v("多节点的"),t("strong",[e._v("key 值")]),e._v("比单节点稍微繁琐一点")]),e._v(" "),t("h4",{attrs:{id:"_3-单节点-diff-逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-单节点-diff-逻辑"}},[e._v("#")]),e._v(" ③ 单节点 diff 逻辑")]),e._v(" "),t("ol",[t("li",[e._v("判断存在对应节点，key 是否相同，节点类型一致，可以复用")]),e._v(" "),t("li",[e._v("key 值相同，"),t("strong",[e._v("节点类型不一致")]),e._v("，删除")]),e._v(" "),t("li",[e._v("key 值不同，删除")]),e._v(" "),t("li",[e._v("不存在对应节点，创建")])]),e._v(" "),t("h4",{attrs:{id:"_4-多节点-diff-逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-多节点-diff-逻辑"}},[e._v("#")]),e._v(" ④ 多节点 diff 逻辑")]),e._v(" "),t("ol",[t("li",[e._v("对比新旧 children 相同 index 的对象 key 是否相同，相同返回对象，不同返回 null")]),e._v(" "),t("li",[e._v("key 不同，节点不能复用，跳出")]),e._v(" "),t("li",[e._v("判断节点是否存在移动，存在返回 新位置")]),e._v(" "),t("li",[e._v("老数组多余新数组，删除")]),e._v(" "),t("li",[e._v("存在新的节点，创建")]),e._v(" "),t("li",[e._v("所有剩余没有匹配的节点，新的数组根据 key 从这个 map 林查找")])]),e._v(" "),t("h2",{attrs:{id:"四、renderer-commit-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、renderer-commit-阶段"}},[e._v("#")]),e._v(" 四、renderer （commit 阶段）")]),e._v(" "),t("ul",[t("li",[e._v("将变化组件渲染到页面中")]),e._v(" "),t("li",[e._v("不能被打断")])]),e._v(" "),t("h3",{attrs:{id:"_4-1-dom-操作前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-dom-操作前"}},[e._v("#")]),e._v(" 4.1 DOM 操作前")]),e._v(" "),t("ol",[t("li",[e._v("处理 DOM 节点，")]),e._v(" "),t("li",[e._v("调用 getSnapshotBeforeUpdate 钩子")]),e._v(" "),t("li",[e._v("调用 useEffect")])]),e._v(" "),t("p",[e._v("useEffect 是异步的/useLayoutEffect，在 DOM 操作后是同步的会堵塞线程")]),e._v(" "),t("h3",{attrs:{id:"_4-2-dom-操作中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-dom-操作中"}},[e._v("#")]),e._v(" 4.2 DOM 操作中")]),e._v(" "),t("ol",[t("li",[e._v("遍历 finishedWork，执行 DOM 操作")]),e._v(" "),t("li",[e._v("对删除的数组会执行 componentWillUnMount 生命周期")])]),e._v(" "),t("p",[e._v("都是递归处理子节点")]),e._v(" "),t("h3",{attrs:{id:"_4-3-dom-操作后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-dom-操作后"}},[e._v("#")]),e._v(" 4.3 DOM 操作后")]),e._v(" "),t("ol",[t("li",[e._v("layout 阶段，也是遍历 effectList ,调用生命周期执行 useEffect")]),e._v(" "),t("li",[e._v("赋值 ref")]),e._v(" "),t("li",[e._v("处理回调")])]),e._v(" "),t("h2",{attrs:{id:"react-库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-库"}},[e._v("#")]),e._v(" react 库")]),e._v(" "),t("p",[e._v("matarial-ui、Storybook、gatsby、formik、react-hook-form、docusaurus、React TypeScript Cheatsheets、react-use、React-Query、Recoil、react-spring")]),e._v(" "),t("ul",[t("li",[e._v("VFC 不带 children 的节点")]),e._v(" "),t("li",[e._v("FC 函数无状态节点")])]),e._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("VFC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("FC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"react"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" Home "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("VFC")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])])])}),[],!1,null,null,null);r.default=a.exports}}]);