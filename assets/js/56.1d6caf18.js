(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{567:function(v,s,_){"use strict";_.r(s);var t=_(2),a=Object(t.a)({},(function(){var v=this,s=v.$createElement,_=v._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"node的进程和线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node的进程和线程"}},[v._v("#")]),v._v(" Node的进程和线程")]),v._v(" "),_("ul",[_("li",[v._v("进程是操作系统的基本概念")]),v._v(" "),_("li",[v._v("操作系统的设计")]),v._v(" "),_("li",[v._v("进程和线程的区别和关系")]),v._v(" "),_("li",[v._v("多进程和多线程")]),v._v(" "),_("li",[v._v("浏览器多进程架构")]),v._v(" "),_("li",[v._v("那么Chrome为什么要使用多进程架构")])]),v._v(" "),_("h4",{attrs:{id:"进程是操作系统的基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程是操作系统的基本概念"}},[v._v("#")]),v._v(" 进程是操作系统的基本概念")]),v._v(" "),_("ol",[_("li",[v._v("计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。"),_("strong",[v._v("（CPU）")])]),v._v(" "),_("li",[v._v("假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，"),_("strong",[v._v("单个CPU一次只能运行一个任务。")])]),v._v(" "),_("li",[v._v("进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。"),_("strong",[v._v("（进程）")])]),v._v(" "),_("li",[v._v("一个车间里，可以有很多工人。他们协同完成一个任务。线程就好比车间里的工人。一个进程可以包括多个线程。"),_("strong",[v._v("（线程）")])]),v._v(" "),_("li",[v._v("车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。"),_("strong",[v._v("（内存）")])]),v._v(" "),_("li",[v._v("每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所：这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。"),_("strong",[v._v("（单个）")])]),v._v(" "),_("li",[v._v('一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫"互斥锁"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。'),_("strong",[v._v("（单个，措施）")])]),v._v(" "),_("li",[v._v("有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。"),_("strong",[v._v("（多个）")])]),v._v(" "),_("li",[v._v('就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做"信号量"（Semaphore），用来保证多个线程不会互相冲突。'),_("strong",[v._v("（多个，措施）")])])]),v._v(" "),_("h4",{attrs:{id:"操作系统的设计-因此可以归结为三点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的设计-因此可以归结为三点"}},[v._v("#")]),v._v(" 操作系统的设计，因此可以归结为三点")]),v._v(" "),_("ul",[_("li",[v._v("（1）以多进程形式，允许多个任务同时运行；")]),v._v(" "),_("li",[v._v("（2）以多线程形式，允许单个任务分成不同的部分运行；")]),v._v(" "),_("li",[v._v("（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。")])]),v._v(" "),_("h4",{attrs:{id:"进程和线程的区别和关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的区别和关系"}},[v._v("#")]),v._v(" 进程和线程的区别和关系")]),v._v(" "),_("ul",[_("li",[v._v("进程是操作系统分配资源的最小单位，线程是程序执行的最小单位。")]),v._v(" "),_("li",[v._v("一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；")]),v._v(" "),_("li",[v._v("进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)。")]),v._v(" "),_("li",[v._v("调度和切换：线程上下文切换比进程上下文切换要快得多。")])]),v._v(" "),_("h2",{attrs:{id:"多进程和多线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多进程和多线程"}},[v._v("#")]),v._v(" 多进程和多线程")]),v._v(" "),_("ul",[_("li",[v._v("多进程：多进程指的是在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态。多进程带来的好处是明显的，比如你可以听歌的同时，打开编辑器敲代码，编辑器和听歌软件的进程之间丝毫不会相互干扰。")]),v._v(" "),_("li",[v._v("多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。")])]),v._v(" "),_("h2",{attrs:{id:"浏览器多进程架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器多进程架构"}},[v._v("#")]),v._v(" 浏览器多进程架构")]),v._v(" "),_("p",[v._v("跟现在的很多多线程浏览器不一样，Chrome浏览器使用多个进程来隔离不同的网页。因此在Chrome中打开一个网页相当于起了一个进程")]),v._v(" "),_("h2",{attrs:{id:"那么chrome为什么要使用多进程架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#那么chrome为什么要使用多进程架构"}},[v._v("#")]),v._v(" 那么Chrome为什么要使用多进程架构?")]),v._v(" "),_("p",[v._v("在浏览器刚被设计出来的时候，那时的网页非常的简单，每个网页的资源占有率是非常低的，因此一个进程处理多个网页时可行的。然后在今天，大量网页变得日益复杂。把所有网页都放进一个进程的浏览器面临在健壮性，响应速度，安全性方面的挑战。因为如果浏览器中的一个tab网页崩溃的话，将会导致其他被打开的网页应用。另外相对于线程，进程之间是不共享资源和地址空间的,所以不会存在太多的安全问题，而由于多个线程共享着相同的地址空间和资源,所以会存在线程之间有可能会恶意修改或者获取非授权数据等复杂的安全问题。")]),v._v(" "),_("blockquote",[_("p",[v._v("在了解这个知识点线，我们需要先说明下什么是浏览器内核。")])]),v._v(" "),_("h2",{attrs:{id:"浏览器内核"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[v._v("#")]),v._v(" 浏览器内核")]),v._v(" "),_("p",[v._v("简单来说浏览器内核是通过取得页面内容、整理信息（应用CSS）、计算和组合最终输出可视化的图像结果，通常也被称为渲染引擎。从上面我们可以知道，Chrome浏览器为每个tab页面单独启用进程，因此每个tab网页都有由其独立的渲染引擎实例。")]),v._v(" "),_("h2",{attrs:{id:"浏览器内核是多线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核是多线程"}},[v._v("#")]),v._v(" 浏览器内核是多线程")]),v._v(" "),_("p",[v._v("浏览器内核是多线程，在内核控制下各线程相互配合以保持同步")]),v._v(" "),_("p",[v._v("一个浏览器通常由以下常驻线程组成")]),v._v(" "),_("ul",[_("li",[v._v("JavaScript引擎线程")]),v._v(" "),_("li",[v._v("定时触发器线程")]),v._v(" "),_("li",[v._v("事件触发线程")]),v._v(" "),_("li",[v._v("异步http请求线程")]),v._v(" "),_("li",[v._v("GUI渲染线程")])]),v._v(" "),_("ol",[_("li",[v._v("GUI 渲染线程")])]),v._v(" "),_("p",[v._v("GUI渲染线程负责渲染浏览器界面HTML元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行。在Javascript引擎运行脚本期间,GUI渲染线程都是处于挂起状态的,也就是说被”冻结”了.")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("Javascript引擎线程\nJavascript引擎，也可以称为JS内核，主要负责处理Javascript脚本程序，例如V8引擎。Javascript引擎线程理所当然是负责解析Javascript脚本，运行代码。")])]),v._v(" "),_("p",[v._v("Javascript是单线程的, 那么为什么Javascript要是单线程的？")]),v._v(" "),_("blockquote",[_("p",[v._v("这是因为Javascript这门脚本语言诞生的使命所致：JavaScript为处理页面中用户的交互，以及操作DOM树、CSS样式树来给用户呈现一份动态而丰富的交互体验和服务器逻辑的交互处理。如果JavaScript是多线程的方式来操作这些UI DOM，则可能出现UI操作的冲突； 如果Javascript是多线程的话，在多线程的交互下，处于UI中的DOM节点就可能成为一个临界资源，假设存在两个线程同时操作一个DOM，一个负责修改一个负责删除，那么这个时候就需要浏览器来裁决如何生效哪个线程的执行结果。当然我们可以通过锁来解决上面的问题。但为了避免因为引入了锁而带来更大的复杂性，Javascript在最初就选择了单线程执行。")])]),v._v(" "),_("p",[v._v("GUI 渲染线程 与 JavaScript引擎线程互斥！")]),v._v(" "),_("blockquote",[_("p",[v._v("由于JavaScript是可操纵DOM的，如果在修改这些元素属性同时渲染界面（即JavaScript线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。因此为了防止渲染出现不可预期的结果，浏览器设置GUI渲染线程与JavaScript引擎为互斥的关系，当JavaScript引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到引擎线程空闲时立即被执行。")])]),v._v(" "),_("p",[v._v("JS阻塞页面加载")]),v._v(" "),_("blockquote",[_("p",[v._v("从上面我们可以推理出，由于GUI渲染线程与JavaScript执行线程是互斥的关系，当浏览器在执行JavaScript程序的时候，GUI渲染线程会被保存在一个队列中，直到JS程序执行完成，才会接着执行。因此如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。")])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("p",[v._v("定时触发器线程\n浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。")])]),v._v(" "),_("li",[_("p",[v._v("事件触发线程\n当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。")])]),v._v(" "),_("li",[_("p",[v._v("异步http请求线程\n在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。")])])]),v._v(" "),_("h2",{attrs:{id:"node中的进程和线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node中的进程和线程"}},[v._v("#")]),v._v(" Node中的进程和线程")]),v._v(" "),_("h4",{attrs:{id:"node-js-中的进程-process"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-js-中的进程-process"}},[v._v("#")]),v._v(" Node.js 中的进程 "),_("code",[v._v("Process")])]),v._v(" "),_("ol",[_("li",[v._v("Node.js 中的进程 Process 是一个全局对象，无需 require 直接使用")]),v._v(" "),_("li",[v._v("多进程就是进程的复制（fork），fork 出来的每个进程都拥有自己的独立空间地址、数据栈，一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 IPC 通信，进程之间才可数据共享。")])]),v._v(" "),_("ul",[_("li",[v._v("Node.js 在 v0.8 版本之后新增了Cluster 来实现多进程架构） ，即 多进程 + 单线程 模式。")]),v._v(" "),_("li",[v._v("开启多进程不是为了解决高并发，主要是解决了单进程模式下 Node.js CPU 利用率不足的情况，充分利用多核 CPU 的性能。")])]),v._v(" "),_("h4",{attrs:{id:"node中进程的各种api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node中进程的各种api"}},[v._v("#")]),v._v(" Node中进程的各种API")]),v._v(" "),_("ul",[_("li",[v._v("process.env：环境变量，通过 process.env.NODE_ENV 获取不同环境项目配置信息")]),v._v(" "),_("li",[v._v("process.nextTick：node的微任务")]),v._v(" "),_("li",[v._v("process.pid：获取当前进程id")]),v._v(" "),_("li",[v._v("process.ppid：当前进程对应的父进程")]),v._v(" "),_("li",[v._v("process.cwd()：获取当前进程工作目录")]),v._v(" "),_("li",[v._v("process.platform：获取当前进程运行的操作系统平台")]),v._v(" "),_("li",[v._v("process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值")]),v._v(" "),_("li",[v._v("进程事件：process.on('uncaughtException', cb) 捕获异常信息、process.on('exit', cb）进程推出监听")]),v._v(" "),_("li",[v._v("三个标准流：process.stdout 标准输出、process.stdin 标准输入、process.stderr 标准错误输出")])]),v._v(" "),_("h4",{attrs:{id:"node-js-进程创建-创建子进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-js-进程创建-创建子进程"}},[v._v("#")]),v._v(" Node.js 进程创建（创建子进程）")]),v._v(" "),_("p",[v._v("我们可以使用 Node.js 的 child_process 模块很容易地衍生一个子进程，并且那些父子进程使用一个消息系统相互之间可以很容易地交流。")]),v._v(" "),_("h4",{attrs:{id:"以child-process模块为例-四种方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#以child-process模块为例-四种方式"}},[v._v("#")]),v._v(" 以child_process模块为例，四种方式")]),v._v(" "),_("ul",[_("li",[v._v("child_process.spawn()：适用于返回"),_("strong",[v._v("大量数据")]),v._v("，例如图像处理，二进制数据处理。")]),v._v(" "),_("li",[v._v("child_process.exec()：适用于"),_("strong",[v._v("小量数据")]),v._v("，maxBuffer 默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用 spawn。")]),v._v(" "),_("li",[v._v("child_process.execFile()：类似 child_process.exec()，区别是不能通过 shell 来执行，不支持像 I/O 重定向和文件查找这样的行为")]),v._v(" "),_("li",[v._v("child_process.fork()： 衍生新的进程，进程之间是相互独立的，每个进程都有自己的 V8 实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统"),_("strong",[v._v("CPU 核心数")]),v._v("设置。")])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("const {spawn } = require('child_process');\nconst child = spawn('pwd');\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("h4",{attrs:{id:"父子进程之间的通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#父子进程之间的通信"}},[v._v("#")]),v._v(" 父子进程之间的通信")]),v._v(" "),_("ul",[_("li",[v._v("当父进程手动调用 child.discount 的时候，discount 事件会被触发。")]),v._v(" "),_("li",[v._v("如果进程不能被衍生（spawn）或者被 killed，error 事件被触发。")]),v._v(" "),_("li",[v._v("当一个子进程的 stdio 关闭的时候，close 事件被触发。")]),v._v(" "),_("li",[v._v("message 事件是最重要的一个。当子进程使用 process.send() 函数发送信息的时候，message 事件会被触发。")])]),v._v(" "),_("h2",{attrs:{id:"nodejs的线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nodejs的线程"}},[v._v("#")]),v._v(" Nodejs的线程")]),v._v(" "),_("p",[v._v("Node是单线程吗？"),_("br"),v._v("\n其实只有js执行是单线程，I/O显然是其它线程")]),v._v(" "),_("p",[v._v("Node是单线程，但是，Node 中最核心的是 v8 引擎，在 Node 启动后，会创建 v8 的实例，这个实例是多线程的。")]),v._v(" "),_("ul",[_("li",[v._v("主线程：编译、执行代码。")]),v._v(" "),_("li",[v._v("编译/优化线程：在主线程执行的时候，可以优化代码。")]),v._v(" "),_("li",[v._v("分析器线程：记录分析代码运行时间，为 Crankshaft 优化代码执行提供依据。")]),v._v(" "),_("li",[v._v("垃圾回收的几个线程。")])]),v._v(" "),_("p",[v._v("node 在 v10 过后提出了 worker_threads 模块，它是在一个单独的 node v8 实例进程里面，可以创建多个线程来进行搞 CPU 任务。")]),v._v(" "),_("p",[v._v("参考：")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.im/post/6844903908385488903#heading-22",target:"_blank",rel:"noopener noreferrer"}},[v._v("Node.js 中的进程与线程"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/79803453",target:"_blank",rel:"noopener noreferrer"}},[v._v("worker_threads"),_("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=a.exports}}]);