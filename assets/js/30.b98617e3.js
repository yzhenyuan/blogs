(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{535:function(t,s,a){"use strict";a.r(s);var r=a(2),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"原型和原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型和原型链"}},[t._v("#")]),t._v(" 原型和原型链")]),t._v(" "),a("p",[t._v("想了解原型需要从 JS 这门语言的设计初衷开始来理解")]),t._v(" "),a("h2",{attrs:{id:"原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),a("h3",{attrs:{id:"一、从-js-设计目的开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、从-js-设计目的开始"}},[t._v("#")]),t._v(" 一、从 js 设计目的开始")]),t._v(" "),a("p",[t._v("1994 年网景公司开发出了第一个网络浏览器，但是整个页面没有任何可以好访问者交互的能力")]),t._v(" "),a("p",[t._v("🆚 例如：表单提交，没有任何验证，什么都不输入然后提交表单后，就只能靠服务端返回信息提示，太消耗网络资源")]),t._v(" "),a("p",[t._v("然后就急需一门网页脚本语言，使得浏览器可以与网页互动")]),t._v(" "),a("p",[t._v("工程师 Brendan Eich 负责开发这种新语言。他觉得，没必要设计得很复杂，这种语言只要能够完成一些简单操作就够了，比如判断用户有没有填写表单")]),t._v(" "),a("p",[t._v("🚗 总结：设计js的目的就是让浏览器可以与网页互动")]),t._v(" "),a("h3",{attrs:{id:"二、遇到的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、遇到的问题"}},[t._v("#")]),t._v(" 二、遇到的问题")]),t._v(" "),a("ul",[a("li",[t._v("要不要继承机制")]),t._v(" "),a("li",[t._v("如果不需要，那么如何将所有对象联系起来")]),t._v(" "),a("li",[t._v("如何共享属性和方法")])]),t._v(" "),a("h4",{attrs:{id:"_2-1-继承机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-继承机制"}},[t._v("#")]),t._v(" 2.1 继承机制")]),t._v(" "),a("p",[t._v("1994 年正是面向对象编程最兴盛的时期，Brendan Eich 无疑受到了影响，"),a("strong",[t._v("Javascript 里面所有的数据类型都是对象（object）")]),t._v("，这一点与 Java 非常相似。但是，他随即就遇到了一个难题")]),t._v(" "),a("p",[t._v("❓ 到底要不要设计"),a("strong",[t._v("继承机制")]),t._v("呢 (O_o)??")]),t._v(" "),a("ul",[a("li",[t._v('如果真的是一种简易的脚本语言，其实不需要有"继承"机制')]),t._v(" "),a("li",[t._v("但是，Javascript 里面都是对象，必须有一种机制，将所有对象联系起来")])]),t._v(" "),a("p",[t._v('但是，他不打算引入"类"（class）的概念，因为一旦有了"类"，Javascript 就是一种完整的面向对象编程语言了，违背了一开始的设计初衷')]),t._v(" "),a("p",[t._v("🚗 总结：不需要继承，但是需要一种机制将所有对象联系起来")]),t._v(" "),a("h4",{attrs:{id:"_2-2-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-构造函数"}},[t._v("#")]),t._v(" 2.2 构造函数")]),t._v(" "),a("p",[t._v("他考虑到，C++和 Java 语言都使用 new 命令，生成实例。")]),t._v(" "),a("p",[t._v("C++的写法是：")]),t._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("　　ClassName *object = new ClassName(param);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Java 的写法是：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("　　"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("因此，他就把 "),a("code",[t._v("new")]),t._v(" 命令引入了 Javascript，用来从原型对象生成一个实例对象。")]),t._v(" "),a("p",[t._v('但是，Javascript 没有"类"，怎么来表示原型对象呢？')]),t._v(" "),a("p",[t._v('这时，他想到 C++和 Java 使用 new 命令时，都会调用"类"的构造函数（constructor）。他就做了一个简化的设计，在 Javascript 语言中，'),a("strong",[t._v("new 命令后面跟的不是类，而是构造函数")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🚆 示例对象 this")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对这个构造函数使用 new，就会生成一个狗对象的 实例。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dogA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DOG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"大毛"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("🚗 总结：使用构造函数来将所有的对象联系起来，"),a("strong",[t._v("构造函数和普通函数的区别就是，构造函数前面有"),a("code",[t._v("new")])])]),t._v(" "),a("h4",{attrs:{id:"_2-3-prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-prototype"}},[t._v("#")]),t._v(" 2.3 prototype")]),t._v(" "),a("p",[t._v("每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。")]),t._v(" "),a("p",[t._v("考虑到这一点，Brendan Eich 决定为构造函数设置一个"),a("code",[t._v("prototype")]),t._v("属性。")]),t._v(" "),a("p",[t._v("这个属性包含一个对象，所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。")]),t._v(" "),a("p",[t._v("实例对象一旦创建，将自动引用 prototype 对象的属性和方法。")]),t._v(" "),a("p",[t._v("🚗 总结：为构造函数设置一个"),a("code",[t._v("prototype")]),t._v("属性，将需要共享的属性和方法放到里面")]),t._v(" "),a("h4",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),a("p",[t._v("❓ 如何实现 继承呢？\n任何一个prototype对象都有一个constructor属性，指向它的构造函数")]),t._v(" "),a("p",[t._v("每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性")]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v('由于所有的实例对象共享同一个 prototype 对象，那么从外界看起来，prototype 对象就好像是实例对象的原型，而实例对象则好像"继承"了 prototype 对象一样。')]),t._v(" "),a("h2",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")])])}),[],!1,null,null,null);s.default=e.exports}}]);