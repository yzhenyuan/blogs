(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{567:function(_,r,v){"use strict";v.r(r);var t=v(2),e=Object(t.a)({},(function(){var _=this,r=_.$createElement,v=_._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"了解docker"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#了解docker"}},[_._v("#")]),_._v(" 了解Docker")]),_._v(" "),v("p",[_._v("Docker 是一种运行于 Linux 和 Windows 上的软件，用于创建、管理和编排容器")]),_._v(" "),v("p",[_._v("Docker 公司，位于旧金山，是整个 Moby 开源项目的维护者")]),_._v(" "),v("p",[_._v("Docker 公司起初是一家名为 dotCloud 的平台即服务（Platform-as-a-Service, PaaS）提供商。底层技术上，dotCloud 平台利用了 Linux 容器技术。为了方便创建和管理这些容器，dotCloud 开发了一套内部工具，之后被命名为“Docker”。(所以说："),v("strong",[_._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口")]),_._v(")")]),_._v(" "),v("h2",{attrs:{id:"docker-引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#docker-引擎"}},[_._v("#")]),_._v(" Docker 引擎")]),_._v(" "),v("p",[_._v("多数技术人员在谈到 Docker 时，主要是指 Docker 引擎。")]),_._v(" "),v("p",[_._v("Docker 引擎是用于运行和编排容器的基础设施工具。")]),_._v(" "),v("h2",{attrs:{id:"环境配置的难题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#环境配置的难题"}},[_._v("#")]),_._v(" 环境配置的难题")]),_._v(" "),v("p",[_._v("软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？")]),_._v(" "),v("p",[_._v("用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。")]),_._v(" "),v("p",[_._v("如果某些老旧的模块与当前环境不兼容，那就麻烦了。")]),_._v(" "),v("p",[_._v("环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。")]),_._v(" "),v("h2",{attrs:{id:"虚拟机和linux容器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机和linux容器"}},[_._v("#")]),_._v(" 虚拟机和Linux容器")]),_._v(" "),v("h4",{attrs:{id:"_1-虚拟机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-虚拟机"}},[_._v("#")]),_._v(" 1. 虚拟机")]),_._v(" "),v("p",[_._v("虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。")]),_._v(" "),v("p",[_._v("虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。")]),_._v(" "),v("p",[_._v("（1）资源占用多")]),_._v(" "),v("p",[_._v("虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。")]),_._v(" "),v("p",[_._v("（2）冗余步骤多")]),_._v(" "),v("p",[_._v("虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。")]),_._v(" "),v("p",[_._v("（3）启动慢")]),_._v(" "),v("p",[_._v("启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行")]),_._v(" "),v("h4",{attrs:{id:"_2-linux-容器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux-容器"}},[_._v("#")]),_._v(" 2. Linux 容器")]),_._v(" "),v("p",[_._v("由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。")]),_._v(" "),v("p",[v("strong",[_._v("Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离")]),_._v("。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。")]),_._v(" "),v("p",[_._v("由于容器是进程级别的，相比虚拟机有很多优势。")]),_._v(" "),v("p",[_._v("1）启动快")]),_._v(" "),v("p",[_._v("容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。")]),_._v(" "),v("p",[_._v("2）资源占用少")]),_._v(" "),v("p",[_._v("容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。")]),_._v(" "),v("p",[_._v("3）体积小")]),_._v(" "),v("p",[_._v("容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。")]),_._v(" "),v("p",[_._v("总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。")]),_._v(" "),v("h2",{attrs:{id:"docker-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#docker-是什么"}},[_._v("#")]),_._v(" Docker 是什么？")]),_._v(" "),v("p",[_._v("**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。")]),_._v(" "),v("p",[_._v("Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。")]),_._v(" "),v("p",[_._v("总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")]),_._v(" "),v("h4",{attrs:{id:"docker-的用途"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#docker-的用途"}},[_._v("#")]),_._v(" Docker 的用途")]),_._v(" "),v("p",[_._v("Docker 的主要用途，目前有三大类。")]),_._v(" "),v("p",[_._v("（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。")]),_._v(" "),v("p",[_._v("（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。")]),_._v(" "),v("p",[_._v("（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("参考阮一峰"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"docker原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#docker原理"}},[_._v("#")]),_._v(" Docker原理")]),_._v(" "),v("p",[_._v("Docker 技术使用 Linux 内核和内核功能（例如 Cgroups 和 namespaces）来分隔进程，以便各进程相互独立运行。这种独立性正是采用容器的目的所在；它可以独立运行多种进程、多个应用，更加充分地发挥基础设施的作用，同时保持各个独立系统的安全性。")]),_._v(" "),v("p",[_._v("容器工具（包括 Docker）可提供基于镜像的部署模式。这使得它能够轻松跨多种环境，与其依赖程序共享应用或服务组。Docker 还可在这一容器环境中自动部署应用（或者合并多种流程，以构建单个应用）。")]),_._v(" "),v("p",[_._v("此外，由于这些工具基于 Linux 容器构建，使得 Docker 既易于使用，又别具一格——它可为用户提供前所未有的高度应用程访问权限、快速部署以及版本控制和分发能力。")])])}),[],!1,null,null,null);r.default=e.exports}}]);