(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{597:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"babel的工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#babel的工作流程"}},[t._v("#")]),t._v(" babel的工作流程")]),t._v(" "),s("p",[t._v("babel本质上是个"),s("strong",[t._v("编译器")])]),t._v(" "),s("h2",{attrs:{id:"一、转换ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、转换ast"}},[t._v("#")]),t._v(" 一、转换AST")]),t._v(" "),s("p",[t._v("通过解析器将原始代码转换成抽象语法树（AST），编译器在这一步一般会做两件事："),s("strong",[t._v("语法分析和语义分析")]),t._v("。")]),t._v(" "),s("p",[t._v("语法分析是定义原始代码中的内容是否被认为一个单位，语义分析是判断这些单位组合后是否为语法，")]),t._v(" "),s("h2",{attrs:{id:"二、遍历ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、遍历ast"}},[t._v("#")]),t._v(" 二、遍历AST")]),t._v(" "),s("p",[t._v("babel会按照顺序访问每个AST上的节点，并调用插件对应的函数，这一步才是插件要做的，在遍历时babel会为每个节点简历一个名为Path的对象，这个对象会包含这个节点的信息，也可以让你访问他的父节点或者子节点，同时在这个对象上也会有各种方法让你来修改节点的内容和结构，从而替换掉一个节点")]),t._v(" "),s("h2",{attrs:{id:"三、-产生代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、-产生代码"}},[t._v("#")]),t._v(" 三、 产生代码")]),t._v(" "),s("p",[t._v("最后babel把修改过的AST再转回代码")]),t._v(" "),s("p",[t._v("剩下的工作就是写入文件或者在进一步处理，其实转换回代码后babel的工作就结束了")])])}),[],!1,null,null,null);a.default=r.exports}}]);