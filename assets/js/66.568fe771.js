(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{579:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react执行流程"}},[t._v("#")]),t._v(" React执行流程")]),t._v(" "),s("p",[t._v("整个React 16的执行的流转，主要可以从两个阶段来解读：")]),t._v(" "),s("ul",[s("li",[t._v("第一个是首次我们调用ReactDOM.render方法的时候是怎么个过程，")]),t._v(" "),s("li",[t._v("还有一个就是当我们调用setState方法，更改Props的时候，也就是组件更新的时候又是怎么个过程？")])]),t._v(" "),s("h2",{attrs:{id:"一、-首次"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、-首次"}},[t._v("#")]),t._v(" 一、 首次")]),t._v(" "),s("p",[t._v("指的是ReactDOM.render方法来创建我们React应用的时候，通常一个React应用只会调用一次，第一次调用会发生什么呢？")]),t._v(" "),s("h3",{attrs:{id:"_1-1-创建一个react-root"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-创建一个react-root"}},[t._v("#")]),t._v(" 1.1 创建一个React Root")]),t._v(" "),s("p",[t._v("有以下比较重要的参数")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具体实现的渲染方法")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ReactNodeList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" mixed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Work"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// unmount组件的方法")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unmount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" mixed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Work"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createBatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Batch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一步中创建的Fiber Root")]),t._v("\n  _internalRoot"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" FiberRoot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h3",{attrs:{id:"_1-2-创建-fiber-root"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-创建-fiber-root"}},[t._v("#")]),t._v(" 1.2 创建 "),s("strong",[t._v("Fiber Root")])]),t._v(" "),s("p",[t._v("它引用着真正的整个应用的fiber树根节点")]),t._v(" "),s("p",[t._v("在构建Fiber Root的过程中，构建Fiber Root引用的第一个fiber实例，这个fiber的tag是HostRoot -- 表示是fiber树的根节点，模式是非异步。并初始化对应的Fiber Root的参数")]),t._v(" "),s("p",[t._v("新建的Fiber Root会成为"),s("code",[t._v("React Root中_internalRoot")]),t._v("参数的引用。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-如果传入了我们自己的callback回调函数-那么react会构建一个新的callback函数-里面先获取上述root的实例作为参数传入我们的回调函数。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-如果传入了我们自己的callback回调函数-那么react会构建一个新的callback函数-里面先获取上述root的实例作为参数传入我们的回调函数。"}},[t._v("#")]),t._v(" 1.3 如果传入了我们自己的Callback回调函数，那么React会构建一个新的callback函数，里面先获取上述Root的实例作为参数传入我们的回调函数。")]),t._v(" "),s("h3",{attrs:{id:"_1-4-调用scheduler的unbatchedupdate方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-调用scheduler的unbatchedupdate方法"}},[t._v("#")]),t._v(" 1.4 调用"),s("code",[t._v("Scheduler的unbatchedUpdate")]),t._v("方法")]),t._v(" "),s("p",[t._v("方法的入参是具体的Root的render方法，也就是上述的Render方法。这个"),s("code",[t._v("unbatchedUpdate")]),t._v("其实就是运行的了我们传入的render方法。unbatched的隐含意思就是整个渲染过程是同步完成的，也就是要尽快完成。这个render方法到底干了些什么呢？")]),t._v(" "),s("h3",{attrs:{id:"_1-5-执行render方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-执行render方法"}},[t._v("#")]),t._v(" 1.5 执行render方法")]),t._v(" "),s("ol",[s("li",[t._v("获取ReactRoot中引用的FiberRoot，并取出根fiber")]),t._v(" "),s("li",[t._v("计算当前时间currentTime：在js被加载的时候，用now()会初始化一个原始的开始时间originalStartTimeMs，然后now() - originalStartTimeMs就表示当前时间。")]),t._v(" "),s("li",[t._v("传入fiber和currentTime。计算fiber的过期时间（优先级），这个过期时间最后的结果应该是Sync=1 也就是同步，首次渲染必然是这个结果。")]),t._v(" "),s("li",[t._v("创建一个更新，过期时间是Sync=1同步，更新的Payload就是我们需要渲染的React元素，更新完成的回调就是包装了我们传入render函数的回调函数的回调函数。把创建的更新放入根fiber的更新队列。")]),t._v(" "),s("li",[t._v("把根fiber提交给Scheduler去开始工作。")]),t._v(" "),s("li",[t._v("至此准备工作已经做完，这就好像是给了一个加速度，下面就会自动不断的运行")])]),t._v(" "),s("h2",{attrs:{id:"当我们在一个组件里面调用-setstate-方法的时候-觉得到底发生了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#当我们在一个组件里面调用-setstate-方法的时候-觉得到底发生了什么"}},[t._v("#")]),t._v(" 当我们在一个组件里面调用 setState 方法的时候，觉得到底发生了什么")])])}),[],!1,null,null,null);a.default=r.exports}}]);